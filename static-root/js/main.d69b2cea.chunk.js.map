{"version":3,"sources":["tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","console","log","current","value","newVal","tempNewTweet","unshift","content","likes","id","ref","type","name","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","send","loadTweets","alert","map","item","index","Tweet","key","tweet","ActionBtn","action","userLike","setLikes","user","setUserLike","actionDisplay","display","onClick","App","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","component","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d69b2cea.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {loadTweets} from \"../lookup\";\r\n\r\n\r\nexport function TweetsComponent (props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit =(event) =>{\r\n        event.preventDefault()\r\n        console.log (event)\r\n        console.log (textAreaRef.current.value)\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewTweet = [...newTweets]\r\n        tempNewTweet.unshift({\r\n            content: newVal,\r\n            likes:111,\r\n            id:5000\r\n        })\r\n        setNewTweets(tempNewTweet)\r\n        textAreaRef.current.value = ''\r\n    }\r\n\r\n    return <div className={props.className}>\r\n        <div className='col-12 mb-3  mt-5 '>\r\n        <form onSubmit={handleSubmit}>\r\n        <textarea ref={textAreaRef} className='form-control ' />\r\n        <button type='submit' className='btn btn-primary my-3' name='tweet'>\r\n            Tweet\r\n        </button>\r\n    </form>\r\n    </div>\r\n        <TweetList newTweets={newTweets}/>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\n/* this is the list of all tweets and in here we made the callback\r\n* from our load tweets function */\r\nexport function TweetList (props) {\r\n    const [tweetsInit,setTweetsInit] = useState([] )\r\n    // console.log (props.newTweets)\r\n    const [tweets,setTweets] = useState([])\r\n\r\n    // this useEffect is for the tweet i am passing in from the form\r\n    useEffect(()=>{\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length){\r\n            setTweets(final)\r\n        }\r\n    },[props.newTweets,tweets,tweetsInit])\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) => {\r\n            if (status === 200){\r\n                // we use the call back to set the tweets response\r\n                setTweetsInit(response)\r\n            }else{\r\n                alert(\"There was an error \")\r\n            }\r\n        }\r\n        loadTweets(myCallback)\r\n    },[tweetsInit])\r\n\r\n    return (\r\n    <div >\r\n        {tweets.map((item, index)=> {\r\n            return <Tweet key={index} tweet={item}\r\n            className='my-5 py-5 shadow bg-light  text-dark'/>\r\n        } )}\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport function ActionBtn(props){\r\n    const {tweet,action} = props\r\n    const [likes,setLikes] = useState (tweet.userLike === true ? true : false)\r\n\r\n    const [userLike, setUserLike] = useState (tweet.user);\r\n    const className =  props.className ? props.className : 'col-10 mx-auto col-md-6 btn btn-primary'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n\r\n    const handleClick = (event) =>{\r\n        event.preventDefault()\r\n        console.log (event)\r\n        if (action.type === 'like'){\r\n            if (userLike === true){\r\n                console.log ('likes ',likes +1)\r\n                setUserLike(false)\r\n                setLikes(likes -1)\r\n            }else{\r\n                setLikes(likes +1)\r\n                setUserLike(true)\r\n            }\r\n        }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return (\r\n        <button className={className } onClick={handleClick}>\r\n        {display}</button>\r\n    )\r\n}\r\n\r\n\r\nexport function Tweet(props){\r\n    const {tweet} = props\r\n    const className =  props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div><p className={className}>\r\n        {tweet.content} - {tweet.id} -{tweet.likes} </p>\r\n        <div className='btn btn-group '>\r\n            <ActionBtn tweet={tweet} action={{type:'like', display:'Likes'}}/>\r\n            <ActionBtn tweet={tweet} action={{type:'unlike', display:'Unlike'}}/>\r\n            <ActionBtn tweet={tweet} action={{type:'retweet', display:'retweet'}}/>\r\n        </div>\r\n    </div>\r\n}\r\n","\r\n\r\n\r\nexport function loadTweets(callback){\r\n    const xhr = new XMLHttpRequest() // xhr = someclass()\r\n    const method = 'GET' // 'POST'\r\n    const url = 'http://127.0.0.1:8000/api/tweets/'\r\n    xhr.responseType = 'json'\r\n    xhr.open(method,url)\r\n    xhr.onload = function () {\r\n        // console.log ('the response ',xhr.response)\r\n        callback(xhr.response,xhr.status)\r\n\r\n    }\r\n    xhr.send()\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {TweetsComponent} from \"./tweets\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n    <div className=\"App\">\r\n        <TweetsComponent/>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {TweetsComponent} from \"./tweets\";\r\n\r\n\r\nconst appEl = document.getElementById('root')\r\n\r\nif (appEl){\r\n    ReactDOM.render( <App />, appEl)\r\n}\r\n\r\nconst component = document.getElementById('tweetme2')\r\n\r\nif (component){\r\n    ReactDOM.render(<TweetsComponent/>,component)\r\n}\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}